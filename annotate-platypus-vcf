#!/usr/bin/env perl

# Add a set of tags to VCF annotations in Platypus output.
#
# ## Usage
#
# `annotate-platypus-vcf [-r reference.fa] < input.vcf > annotated.vcf`
#
# ## Annotations
#
# All annotations are added as new tags in the INFO column, including:
#
# * Variant type: `TYPE=SNP|MNP|INS|DEL|COMPLEX|MATCH`
# * Allele frequency: `AF=[0.0..1.0]`
# * ALT-REF percent frequencies: `ARF=[0.0..100.0]:[0.0..100.0]`
# * Variant effect prediction: `VEP=[SO term]` (the most adverse effect selected)
# * Observation counts `OBS=count/total`
# * Known alleles at this locus: `ALL=id1,id2,...,idN`
# * Genes: `GN=id1,id2,...,idN`
#
# Except for the lists of knows alleles and genes that are unified for each
# multiallelic variant, the annotations for multiple alleles are represented as
# comma-separated lists, _e.g._, `AF=0.07306,;` (The first allele's frequency
# is 0.07306; data not available for the second).
#
use strict;
use warnings FATAL => qw[ all ];
use feature qw[ state say ];
use 5.010;

use English '-no_match_vars';
use Carp;
use Data::Dumper;

use File::Basename;
use IO::File;
use IO::Uncompress::Gunzip qw[ gunzip ];
use Vcf;
use FaSlice;
use Try::Tiny;
use AnyEvent::HTTP;
use JSON::XS qw[ decode_json ];
use Promises qw[ collect deferred ];
use List::MoreUtils qw[ any ];

our $VERSION = 0.1;

use constant SUCCESS => 200;
my $REFERENCE;

#__________________________________________________________________
#
# ### Main program
#
# This code is derived from
# [vcf-convert](https://github.com/vcftools/vcftools/blob/master/src/perl/vcf-convert)
# and it retains some homology around data input and indel allele
# normalization.


# The only optional input is reference genome (-r) that is used to validate
# normalized indels. It is ignored while processing SNP-only VCFs.
my $opts = parse_params();
my $vcf_in  = Vcf->new(fh => \*STDIN);
$vcf_in->parse_header();

# #### Header

# Version change is a paranoid precaution against the possibility of new
# annotations being incompatible with VCF 4.0.
shift @{$vcf_in->{header_lines}}; # discard the version line
my $vcf_out = Vcf->new(version => '4.1');
if ($opts->{refseq}) {
  $vcf_out->add_header_line({key => 'reference', value => $opts->{refseq}});
}

# Copy the input header to the output stream, inserting new INFO tag
# descriptions in front of the old ones.
my $info_seen;
foreach my $line (@{$vcf_in->{header_lines}}) {
  if ($line->{key} eq 'INFO' and not $info_seen) { # The first INFO line
    $info_seen++;
    $vcf_out->add_header_line({
      key => 'INFO',
      ID => 'AF',
      Number => 'A',
      Type => 'Float',
      Description => 'Allele frequency from ExAC'
    });
    $vcf_out->add_header_line({
      key => 'INFO',
      ID => 'ALL',
      Number => 'A',
      Type => 'String',
      Description => 'Percent frequencies of ALT and REF alleles'
    });
    $vcf_out->add_header_line({
      key => 'INFO',
      ID => 'ARF',
      Number => 'A',
      Type => 'Float',
      Description => 'Percent frequencies of ALT and REF alleles'
    });
    $vcf_out->add_header_line({
      key => 'INFO',
      ID => 'GN',
      Number => 'A',
      Type => 'String',
      Description => 'IDs of affecteg genes'
    });
    $vcf_out->add_header_line({
      key => 'INFO',
      ID => 'OBS',
      Number => 'A',
      Type => 'Float',
      Description => 'Allele observation counts from ExAC (proper / all)'
    });
    $vcf_out->add_header_line({
      key => 'INFO',
      ID => 'TYPE',
      Number => 'A',
      Type => 'String',
      Description => 'The type of allele: SNP, MNP, INS, DEL, or COMPLEX'
    });
    $vcf_out->add_header_line({
      key => 'INFO',
      ID => 'VEP',
      Number => 'A',
      Type => 'String',
      Description => 'Prediction of the most severe variant effect from ExAC'
    });
  }
  $vcf_out->add_header_line($line); # The rest of the header
}
$vcf_out->add_columns(@{$vcf_in->{columns}});
print $vcf_out->format_header();

#
# #### Data
#

# Each VCF line
while (my $x = $vcf_in->next_data_hash()) {

  # **Local processing**
  fill_genotype_defaults($x);
  my $var_info = classify_variant($x);

  # If there is an indel, then a new set of left-aligned, minimized REF and ALT
  # alleles must be computed.

  if ( $var_info->{indel} ) {
    my ($map, $alt_to_mapref) = indel_maps($x, $vcf_in);

    # Use
    # [Vcf::fill_ref_alt_mapping()](http://search.cpan.org/dist/VCF-1.0/lib/VCF/V4_0.pm#fill_ref_alt_mapping)
    # to find the minimal reference segment containing all variants.
    $x->{REF} = $vcf_out->fill_ref_alt_mapping($map);
    if (not defined $x->{REF}) {
      error("Failed on line $x->{CHROM}:$x->{POS}");
    }

    for my $i (0 .. @{$x->{ALT}} - 1) {
      my $orig_ref = $alt_to_mapref->{$x->{ALT}[$i]}{ref};
      my $orig_alt = $alt_to_mapref->{$x->{ALT}[$i]}{alt};
      $x->{ALT}[$i] = $map->{$orig_ref}{$orig_alt};
    }
  }

  # **Fetch predictions and population data from ExAC**
  #

  # Use a state varible to wrap multiallelic requests in a single
  # transaction.
  my $transaction = AnyEvent->condvar;

  # Make a separate request for each allele and lump them in a single promise
  collect (
    map { # make a list of promises
      retrieve ( "http://exac.hms.harvard.edu/rest/variant", $_ )
    } @{$var_info->{allele}}
  )->then (
    # Send all fulfilled promises to consumer
    sub {
      $transaction->send(\@_);
    },

    sub { $transaction->croak( 'ERROR' ) }
  );

  # Block until all of this variant's allele-specific requests have received a
  # response. Responses can come out of order, so storing them as a hash allows
  # order reconstruction from `(@{$var_info->{allele}}`.
  my %response = map {$_->[0]->{key} => $_->[0]} @{$transaction->recv};

  # Extract allele data from each response and hang it on to
  # `$var_info` produced by initial variant classification.
  foreach my $variant_id (@{$var_info->{allele}}) { # in order
    my $allele = $response{$variant_id};
    #print Dumper($allele);
    if ( $allele->{any_covered} and exists $allele->{variant}->{allele_count}) {  ### 6 ###
      push @{$var_info->{allele_counts}},
        $allele->{variant}->{allele_count} . q{/} . $allele->{variant}->{allele_num};
    }
    else {
      push @{$var_info->{allele_counts}}, q{};  ### 6 ###
    }

    if ( $allele->{any_covered} and exists $allele->{variant}->{allele_freq}) {
      push @{$var_info->{allele_freq}}, sprintf '%7.5f', $allele->{variant}->{allele_freq};  ### 2 ###
    }
    else {
      push @{$var_info->{allele_freq}}, q{};  ### 2 ###
    }

    if ( $allele->{any_covered} and exists $allele->{variant}->{vep_annotations}) {
      push @{$var_info->{vep}}, VEP::Severity::most_adverse(
        map {$_->{major_consequence}} @{$allele->{variant}->{vep_annotations}}
      );
    }
    else {
      push @{$var_info->{allele_freq}}, q{};  ### 2 ###
    }

    if ( $allele->{any_covered} and exists $allele->{variant}->{orig_alt_alleles}) {
      foreach my $id (@{$allele->{variant}->{orig_alt_alleles}}) {
        $var_info->{known_alleles}{$id}++;
      };
    }

    if ( $allele->{any_covered} and exists $allele->{variant}->{genes}) {
      foreach my $id (@{$allele->{variant}->{genes}}) {
        $var_info->{genes}{$id}++;
      };
    }
  }

  # **Add annotations and write the augmented variant**
  $x->{INFO}->{TYPE} = join q{,}, @{$var_info->{type}};  ### 1 ###

  my @ratio;
  my $total_cov = $x->{INFO}->{TC};
  foreach my $alt_cov (split /,/, $x->{INFO}->{TR}) {
    my $percent_alt = sprintf "%5.3f", 100.0 * $alt_cov / $total_cov;
    my $percent_ref = sprintf "%5.3f", 100.0 * ($total_cov - $alt_cov) / $total_cov;
    push @ratio, "$percent_alt:$percent_ref";
  }
  $x->{INFO}->{ARF} = join q{,}, @ratio;  ### 4 ###

  if (any {$_} @{$var_info->{allele_counts}}) {
    $x->{INFO}->{OBS} = join q{,}, @{$var_info->{allele_counts}};
  }

  if (any {$_} @{$var_info->{allele_freq}}) {
    $x->{INFO}->{AF} = join q{,}, @{$var_info->{allele_freq}};
  }

  if (any {$_} @{$var_info->{vep}}) {
    $x->{INFO}->{VEP} = join q{,}, @{$var_info->{vep}};
  }

  if ($var_info->{known_alleles}) {
    $x->{INFO}->{ALL} = join q{,}, sort keys %{$var_info->{known_alleles}};
  }

  if ($var_info->{known_alleles}) {
    $x->{INFO}->{GN} = join q{,}, sort keys %{$var_info->{genes}};
  }

  print $vcf_out->format_line($x);

} # next_data_hash()

#__________________________________________________________________
#
# ### Functions
#

# **fill_genottype_defaults($var)**
#
# Add default FORMAT values not present in the input VCF
#
sub fill_genotype_defaults {
  my $var = shift;

  # This function's body was copied from
  # [vcf-convert](https://github.com/vcftools/vcftools/blob/master/src/perl/vcf-convert).
  for my $gt (values %{$var->{gtypes}}) {
    for my $field (@{$var->{FORMAT}}) {

      # Skip the GT tag, so that ploidy information is not lost (`./.` would become `.`)
      next if $field eq 'GT';

      if ( $field eq 'FT' and $gt->{$field} eq $vcf_in->{filter_passed}) {
        $gt->{$field} = $vcf_out->{filter_passed};
      }

      if (
        exists $vcf_in->{defaults}{$field} and
        $vcf_in->{defaults}{$field} eq $gt->{$field}
      ) {
        $gt->{$field} = $vcf_out->{defaults}{$field};
        next;
      }

      if (
        exists $gt->{$field} and
        exists $vcf_in->{header}{FORMAT}{$field}{default} and
        $vcf_in->{header}{FORMAT}{$field}{default} eq $gt->{$field}
      ) {
        delete $gt->{$field};
      }
    }
  }

  return 1;
}


#__________________________________________________________________
#
# **classify_variant($var)**
#
# Parse the ALT column and see if there are indels. To allow uniform treatment
# of mono-allelic and multi-allelic variants, return allele IDs (suitable for
# ExAC queries) and variant types as arrays.
#
sub classify_variant {
  my $var = shift;
  my $info = {
    allele => [],
    type => [],
  };

  # This function's body is derived from
  # [vcf-convert](https://github.com/vcftools/vcftools/blob/master/src/perl/vcf-convert).
  #
  for my $alt (@{$var->{ALT}}) {
    my ($type, $len, $ht) = $vcf_in->event_type($var, $alt);

    push @{$info->{allele}}, "$var->{CHROM}-$var->{POS}-$var->{REF}-$alt";

    if ( $type eq 's' ) {
      if ($len == 1) {
        push @{$info->{type}}, 'SNP';
      }
      else {
        if (length $var->{REF} == length $alt and length $alt == $len) {
          push @{$info->{type}}, 'MNP';
        }
        else {
          push @{$info->{type}}, 'COMPLEX';
        }
      }
      next;
    }

    if ( $type eq 'r' ) {
      push @{$info->{type}}, 'MATCH';
      next;
    }

    if ( $type ne 'i' ) {
      error("FIXME: expected indel at $var->{CHROM}:$var->{POS}");
    }

    if ($len > 0) {
      push @{$info->{type}}, 'INS';
    }
    else {
      push @{$info->{type}}, 'DEL';
    }

    $info->{indel}++;

  } # each ALT allele

  return $info;
} # classify_variant()


#__________________________________________________________________
#
# **indel_maps($var, $input_vcf)** -> $map, $alt_to_mapref
#
# Prepare a couple maps to unify REF and ALT alleles with
# [Vcf::fill_ref_alt_mapping()](http://search.cpan.org/dist/VCF-1.0/lib/VCF/V4_0.pm#fill_ref_alt_mapping).
#
# For example, for the variant `CTGTGTG -> C,CTG` the maps are constructed as:
#
# ```
# $map = {CTG => {C => 1}, CTGTG => {C => 1}}
# $alt_to_mapref = {
#   CTG => {ref => CTG, alt => C},
#   C => {ref => CTGTG, alt => C}
# }
# ```
# This function's body was copied (with modifications) from
# [vcf-convert](https://github.com/vcftools/vcftools/blob/master/src/perl/vcf-convert).
#
sub indel_maps {
  my ($var, $input_vcf) = @_;
  my $map = {};
  my $alt_to_mapref = {};

  for my $alt (@{$var->{ALT}}) {
    my ($type, $len, $ht) = $input_vcf->event_type($var, $alt);
    if ( $type eq 's' or $type eq 'r' ) { # SNP / MATCH
      $alt_to_mapref->{$alt} = {ref => $var->{REF}, alt => $alt};
      $map->{$var->{REF}}{$alt} = 1;
      next;
    }

    if ( $type eq 'i' and $len > 0 ) { # INS
      my $tmp = $var->{REF}.$ht;
      $alt_to_mapref->{$alt} = {ref => $var->{REF}, alt => $tmp};
      $map->{$var->{REF}}{$tmp} = 1;
      next;
    }
    elsif ( $type eq 'i' and $len < 0 ) { # DEL
      if ( not $REFERENCE ) {
        if ( not $opts->{refseq} ) {
          error('Indels present, missing the -r option.');
        }
        $REFERENCE = FaSlice->new(file => $opts->{refseq}, size => 1_000_000);
      }
      my $ref   = $REFERENCE->get_slice($var->{CHROM}, $var->{POS}, $var->{POS} + abs $len);

      my $nref1 = uc substr $ref, 0, 1;
      my $oref1 = uc substr $var->{REF}, 0, 1;

      if ( $oref1 ne $nref1 ) { # Sanity check
        error("Sanity check failed: the ref does not agree at $var->{CHROM}:$var->{POS} .. [$nref1] in .fa,  [$oref1] in .vcf");
      }

      $alt_to_mapref->{$alt} = { ref => $ref, alt => $nref1 };
      $map->{$ref}{$nref1} = 1;
      next;
    }
    else { # Unknown variant type
      error("Uh, FIXME: $var->{CHROM}:$var->{POS} [$type] [$len] [$ht]");
    }
  } # each allele

  return ($map, $alt_to_mapref);
}

#________________________________________________________________________
#
# **retrieve($uri)**
#
# Launch a web fetch request a URI. Return a promise to deliver a decoded
# JSON response.
#
sub retrieve {
  my ($api_uri, $key) = @_;
  my $d = deferred;

  say {*STDERR} "fetching $key";
  http_get "$api_uri/$key" => sub {
    my ($body, $header) = @_;
    my $data;
    if ($header->{Status} == SUCCESS) {
      # Handle exceptions caused by non-JSON responses.
      try {
        # The server is set to gzip large response bodies
        if ($header->{'content-encoding'} and $header->{'content-encoding'} eq 'gzip') {
          my $buffer;
          gunzip \$body => \$buffer;
          $body = $buffer;
        }

        # HTML is returned in response to bad requests. Also, variants in
        # unlocalized contigs are greeted with a "Page not found" HTML
        # response.
        if (index($body, '<!doctype html>') >= 0) {
          my ($chrom, $pos, $ref, $alt) = split q{-}, $key;
          $data = {
            key => $key,
            any_covered => undef,
            variant => {
              chrom => $chrom,
              pos => $pos,
              ref => $ref,
              alt => $alt
            }
          };
        }

        # Success
        else {
          $data = decode_json($body);
          $data->{key} = $key;
        }
      }
      catch {
        say {*STDERR} "$_ in response from $api_uri/$key";

        my $fh = IO::File->new('bad-response.dump', '>');
        if (defined $fh) {
          print {$fh} Data::Dumper->Dump([$header, $body], [qw(header body)]);
          $fh->close;
        }

        $d->reject();
      };

      $d->resolve($data);
    }
    else {
      $d->reject( $body );
    }
  };

  return $d->promise;
}

#________________________________________________________________________
#
# ## Utility functions
#
sub usage {
  my $self = basename $PROGRAM_NAME;

  say {*STDERR} <<"END";
  $self v$VERSION: add variation type and depth annotations; add consequence predictions from ExAC

  Usage: cat in.vcf | $self [OPTIONS] > out.vcf
  Options:
     -r, --refseq <file>    The reference sequence in samtools faindexed fasta file (not required with SNPs only)
     -h, -?, --help         This help message
END

  return 1;
}

sub error {
  my $msg = shift;
  croak $msg if $msg;
  usage();
  exit 1;
}

sub parse_params {
  my $o = {};
  while (my $arg = shift @ARGV) {
    if ( $arg eq '-r' or $arg eq '--refseq' ) {
      $o->{refseq} = shift @ARGV;
      next;
    }

    if ($arg eq q{-?} or $arg eq '-h' or $arg eq '--help') {
      usage();
      exit 1;
    }

    error("Unknown parameter \"$arg\". Run with -h for help.");
  }

  return $o;
}

#__________________________________________________________________
#
# ### Modules
#

# **VEP::Severity**
#
# Provide data and a method for selecting the most severe variant
# effect prediction.
#
# The data in the ExAC response (`vep_annotations`) appear to be sorted by
# severity, but anyway. Better be paranoid.
#
package VEP::Severity;

our (@data, %order);

BEGIN {
  @data = (
    [
      'transcript_ablation',
      q{A feature ablation whereby the deleted region includes a transcript feature},
      'SO:0001893',
      'Transcript ablation',
      'HIGH'
    ],
    [
      'splice_acceptor_variant',
      q{A splice variant that changes the 2 base region at the 3' end of an intron},
      'SO:0001574',
      'Splice acceptor variant',
      'HIGH'
    ],
    ['splice_donor_variant',
      q{A splice variant that changes the 2 base region at the 5' end of an intron},
      'SO:0001575',
      'Splice donor variant',
      'HIGH'
    ],
    ['stop_gained',
      q{A sequence variant whereby at least one base of a codon is changed, resulting in a premature stop codon, leading to a shortened transcript},
      'SO:0001587',
      'Stop gained',
      'HIGH'
    ],
    [
      'frameshift_variant',
      q{A sequence variant which causes a disruption of the translational reading frame, because the number of nucleotides inserted or deleted is not a multiple of three},
      'SO:0001589',
      'Frameshift variant',
      'HIGH'
    ],
    ['stop_lost',
      q{A sequence variant where at least one base of the terminator codon (stop) is changed, resulting in an elongated transcript},
      'SO:0001578',
      'Stop lost',
      'HIGH'
    ],
    ['start_lost',
      q{A codon variant that changes at least one base of the canonical start codon},
      'SO:0002012',
      'Start lost',
      'HIGH'
    ],
    [
      'transcript_amplification',
      q{A feature amplification of a region containing a transcript},
      'SO:0001889',
      'Transcript amplification',
      'HIGH'
    ],
    [
      'initiator_codon_variant',
      q{A codon variant that changes at least one base of the first codon of a transcript},
      'SO:0001821',
      'Inframe variant',
      'MODERATE'
    ],
    [
      'inframe_insertion',
      q{An inframe non synonymous variant that inserts bases into in the coding sequence},
      'SO:0001821',
      'Inframe insertion',
      'MODERATE'
    ],
    [
      'inframe_deletion',
      q{An inframe non synonymous variant that deletes bases from the coding sequence},
      'SO:0001822',
      'Inframe deletion',
      'MODERATE'
    ],
    [
      'missense_variant',
      q{A sequence variant, that changes one or more bases, resulting in a different amino acid sequence but where the length is preserved},
      'SO:0001583',
      'Missense variant',
      'MODERATE'
    ],
    [
      'protein_altering_variant',
      q{A sequence_variant which is predicted to change the protein encoded in the coding sequence},
      'SO:0001818',
      'Protein altering variant',
      'MODERATE'
    ],
    [
      'splice_region_variant',
      q{A sequence variant in which a change has occurred within the region of the splice site, either within 1-3 bases of the exon or 3-8 bases of the intron},
      'SO:0001630',
      'Splice region variant',
      'LOW'
    ],
    [
      'incomplete_terminal_codon_variant',
      q{A sequence variant where at least one base of the final codon of an incompletely annotated transcript is changed},
      'SO:0001626',
      'Incomplete terminal codon variant',
      'LOW'
    ],
    [
      'stop_retained_variant',
      q{A sequence variant where at least one base in the terminator codon is changed, but the terminator remains},
      'SO:0001567',
      'Stop retained variant',
      'LOW'
    ],
    [
      'synonymous_variant',
      q{A sequence variant where there is no resulting change to the encoded amino acid},
      'SO:0001819',
      'Synonymous variant',
      'LOW'
    ],
    [
      'coding_sequence_variant',
      q{A sequence variant that changes the coding sequence},
      'SO:0001580',
      'Coding sequence variant',
      'MODIFIER'
    ],
    [
      'mature_miRNA_variant',
      q{A transcript variant located with the sequence of the mature miRNA},
      'SO:0001620',
      'Mature miRNA variant',
      'MODIFIER'
    ],
    [
      '5_prime_UTR_variant',
      q{A UTR variant of the 5' UTR},
      'SO:0001623',
      '5 prime UTR variant',
      'MODIFIER'
    ],
    [
      '3_prime_UTR_variant',
      q{A UTR variant of the 3' UTR},
      'SO:0001624',
      '3 prime UTR variant',
      'MODIFIER'
    ],
    [
      'non_coding_transcript_exon_variant', q{A sequence variant that changes non-coding exon sequence in a non-coding transcript},
      'SO:0001792',
      'Non coding transcript exon variant',
      'MODIFIER'
    ],
    [
      'intron_variant',
      q{A transcript variant occurring within an intron},
      'SO:0001627',
      'Intron variant',
      'MODIFIER'
    ],
    [
      'NMD_transcript_variant',
      q{A variant in a transcript that is the target of NMD},
      'SO:0001621',
      'NMD transcript variant',
      'MODIFIER'
    ],
    [
      'non_coding_transcript_variant', q{A transcript variant of a non coding RNA gene},
      'SO:0001619',
      'Non coding transcript variant',
      'MODIFIER'
    ],
    [
      'upstream_gene_variant',
      q{A sequence variant located 5' of a gene},
      'SO:0001631',
      'Upstream gene variant',
      'MODIFIER'
    ],
    [
      'downstream_gene_variant',
      q{A sequence variant located 3' of a gene},
      'SO:0001632',
      'Downstream gene variant',
      'MODIFIER'
    ],
    [
      'TFBS_ablation',
      q{A feature ablation whereby the deleted region includes a transcription factor binding site},
      'SO:0001892',
      'TFBS ablation',
      'MODIFIER'
    ],
    [
      'TFBS_amplification',
      q{A feature amplification of a region containing a transcription factor binding site},
      'SO:0001892',
      'TFBS amplification',
      'MODIFIER'
    ],
    [
      'TF_binding_site_variant',
      q{A sequence variant located within a transcription factor binding site},
      'SO:0001782',
      'TF binding site variant',
      'MODIFIER'
    ],
    [
      'regulatory_region_ablation',
      q{A feature ablation whereby the deleted region includes a regulatory region},
      'SO:0001894',
      'Regulatory region ablation',
      'MODERATE'
    ],
    [
      'regulatory_region_amplification', q{A feature amplification of a region containing a regulatory region},
      'SO:0001891',
      'Regulatory region amplification',
      'MODIFIER'
    ],
    [
      'feature_elongation',
      q{A sequence variant located within a regulatory region},
      'SO:0001907',
      'Feature elongation',
      'MODIFIER'
    ],
    [
      'regulatory_region_variant',
      q{A sequence variant located within a regulatory region},
      'SO:0001566',
      'Regulatory region variant',
      'MODIFIER'
    ],
    [
      'feature_truncation',
      q{A sequence variant that causes the reduction of a genomic feature, with regard to the reference sequence},
      'SO:0001906',
      'Feature truncation',
      'MODIFIER'
    ],
    [
      'intergenic_variant',
      q{A sequence variant located in the intergenic region, between genes},
      'SO:0001628',
      'Intergenic variant', 'MODIFIER'
    ]
  );

  %order = map {$VEP::Severity::data[$_]->[0] => $_} 0 .. $#VEP::Severity::data;
}


sub VEP::Severity::sort {
  my @list = @_;
  return wantarray ? sort {$VEP::Severity::order{$a} <=> $VEP::Severity::order{$b}} @list : undef;
}

sub VEP::Severity::most_adverse {
  my @list = @_;
  my @sorted = VEP::Severity::sort(@list);
  return shift @sorted;
}

1;
